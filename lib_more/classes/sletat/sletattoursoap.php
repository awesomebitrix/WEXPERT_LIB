<?
/**
 * Класс для работы с SletatTourAPI посредством SOAP-сервиса, который позволяет осуществлять поиск и бронирование туров ( http://sletat.ru/ )<br>
 * справочники обновляются каждые 2 недели<br>
 * 20000 - запросов в месяц максимум. дальше автоматически начисляется доплата.<br>
 * диапазон - 45 дней лимит.<br>
 * @author Матяш Сергей WEB-XPERT
 * @version 1.0 14.08.2012
 * @see http://sletat.ru/files/xml-gateway-manual.pdf
 */
class SletatTourSOAP{

	/**
	 * Дебажить запросы или нет<br>
	 * Если true, то ссылка на каждый запрос к travelmenu выводится в консоль
	 * @var bool
	 */
	public static $DEBUG = false;
	/**
	 * @var array Массив ошибок
	 */
	public static $ERRORS = array(
		'oops' => "Возникла непредвиденная ошибка.\nОбратитесь к администратору.",
		'empty' => 'По запросу ничего не найдено.'
	);

	public static $MEALS = array(
		'0' => 'не важно',
		'AI' => 'завтраки, обеды, ужины, напитки',
		'BB' => 'завтраки',
		'FB' => 'завтраки, обеды, ужины',
		'FB+' => 'завтраки, обеды, ужины - расширенное меню',
		'HB' => 'завтраки, ужины',
		'HALFBOARD' => 'завтраки, ужины',
		'HB+' => 'завтраки, ужины - расширенное меню',
		'RO' => 'без питания',
		'UAI' => 'завтраки, обеды, ужины, напитки - расширенное меню',
	);

	/**
	 * @var str Директория кеша
	 */
	public static $CACHE_DIR = '/php/SletatTourSOAP/';
	/**
	 * @var int Кеш для внутренних выборок (очень небольшой)
	 */
	public static $INNER_CACHE = 3600; // 1 hour
	/**
	 * @var int Быстрый кеш
	 */
	public static $QUICK_CACHE = 7200; // 2 days
	/**
	 * @var int Кеш среднего времени
	 */
	public static $MEDIUM_CACHE = 1209600; // 2 weeks
	/**
	 * @var int Долгий кеш
	 */
	public static $LONG_CACHE = 2592000; // 2 months

	/**
	 * @var bool Последняя ошибка
	 */
	public static $LAST_ERROR = false;
	/**
	 * @var string Хост сервиса
	 */
	private static $WSDL = 'http://module.sletat.ru/XmlGate.svc?wsdl';
	/**
	 * @var array параметры последнего запроса
	 */
	private static $params = array();

	/**
	 * @var string Логин на сайте sletat.ru
	 */
	private static $LOGIN = 'matiaspub@gmail.com';
	/**
	 * @var string Пароль на сайте sletat.ru
	 */
	private static $PASSWORD = '465018256';

	/**
	 * @var string Подключенный SoapClient отдающий все запросы на сервис
	 */
	private static $SOAP = false;
	/**
	 * @var string Последний ответ от сервиса
	 */
	private static $response = false;
	/**
	 * @var string Последний использованый метод
	 */
	private static $method = false;


	/**
	 * Метод возвращает список всех городов вылета. Список городов вылета может быть отредактирован в личном кабинете SLETAT.RU.
	 * @return
	 * CityCollection является коллекцией городов вылета, каждый элемент City содержит поле Id (идентификатор города) и Name (название города).
	 */
	public static function GetDepartCities(){
		// cache 2week
		self::$params = false;
		self::$method = 'GetDepartCities';
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$MEDIUM_CACHE, self::$method, self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Выборка из битрикса(не со sletat.ru)
	 * Метод возвращает список локаций $is = 'CITY' | $is = 'COUNTRY'
	 * @return
	 * CityCollection является коллекцией городов вылета, каждый элемент City содержит поле Id (идентификатор города) и Name (название города).
	 */
	public static function GetInnerLocations($is, $params=array()){
		// cache 1 hour
		CModule::IncludeModule('iblock');
		$arF = array('IBLOCK_ID'=> 1, 'ACTIVE'=>'Y');
		if($params['COX']){
			$ff = $arF;
			$ff['XML_ID'] = $params['COX'];
			$rsSs = CIBlockSection::GetList(array('SORT'=>"ASC"),$ff);
			while($arSs = $rsSs->GetNext()){
				$params['SECTION_ID'][] = $arSs['ID'];
			}
			unset($params['COX']);
		}
		$arF = array_merge($arF,$params);
		$rsSec = CIBlockSection::GetList(array('SORT'=>'ASC', 'NAME'=> 'ASC'),$arF,false,array('UF_*'));
		while($arSec = $rsSec->GetNext()){
			if($is=='COUNTRY' && $arSec['UF_IS']==3){
				$ret[] = $arSec;
			} elseif($is == 'CITY' && $arSec['UF_IS'] == 4){
				$ret[] = $arSec;
			} elseif(!$is){
				$ret[] = $arSec;
			}
		}
//		echo '<pre>'; print_r($ret); echo '</pre>';
		return $ret;
	}

	/**
	 * Метод возвращает список стран, туры в которые есть из указанного города вылета. Список стран быть отредактирован в личном кабинете SLETAT.RU. Список городов вылета получается методом GetDepartCities.
	 * @param int $townFromId идентификатор города вылета;
	 * @return
	 * CountryCollection является коллекцией стран, каждый элемент Country содержит поле Id (идентификатор страны) и Name (название страны).
	 */
	public static function GetCountries($townFromId=false){
		// cache 2week
		self::$params = array('townFromId'=>$townFromId);
		self::$method = 'GetCountries';
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$MEDIUM_CACHE, self::$method.md5(serialize(self::$params)), self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Метод возвращает список курортов для выбранной страны. Список стран получается методом GetCountries.
	 * @param int $countryId идентификатор страны;
	 * @return
	 * CityCollection является коллекцией курортов, каждый элемент City содержит поле Id (идентификатор курорта) и Name (название курорта).
	 */
	public static function GetCities($countryId){
		// cache 2week
		self::$params = array('countryId'=>$countryId);
		self::$method = 'GetCities';
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$MEDIUM_CACHE, self::$method.md5(serialize(self::$params)), self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Метод возвращает список доступных отелей в выбранной стране. Дополнительно, список отелей может быть отфильтрован по массиву курортов и категорий отелей, а также по имени самого отеля.
	 * @param array $params Параметры запроса:<br>
	 * countryId – идентификатор страны;<br>
	 * towns – массив из идентификаторов курортов (может быть пустым для учёта всех курортов выбранной страны);<br>
	 * stars – массив из идентификаторов категорий отелей (может быть пустым для учёта всех категорий отелей);<br>
	 * filter – подстрока для поиска отелей по названию, должна быть пустой для игнорирования данного параметра;<br>
	 * count – максимальное количество отелей в ответе (сначала выбирается указанное количество с самым лучшим рейтингом, затем сортируется по названию), может быть -1 для возврата всех отелей;<br>
	 * @return
	 * HotelsCollection является коллекцией отелей, каждый элемент Hotel содержит поле Id (идентификатор отеля),
	 * Name (название отеля), StarName (название категории отеля), Rate (рейтинг отеля по пятибальной шкале).
	 */
	public static function GetHotels($params){
		// cache 2week
		$params['count'] = -1;
		self::$params = $params;
		self::$method = 'GetHotels';
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$MEDIUM_CACHE, self::$method.md5(serialize(self::$params)), self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Метод возвращает список доступных категорий отелей в выбранной стране и курортах.
	 * @param array $params Параметры запроса:<br>
	 * countryId – идентификатор страны;<br>
	 * towns – массив из идентификаторов курортов (может быть пустым для учёта всех курортов выбранной страны);<br>
	 * @return
	 * HotelStarsCollection является коллекцией категорий отелей, каждый элемент HotelStars содержит поле Id (идентификатор категории) и Name (название категории).
	 */
	public static function GetHotelStars($params){
		// cache month
		self::$params = $params;
		self::$method = 'GetHotelStars';
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$LONG_CACHE, self::$method.md5(serialize(self::$params)), self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Выбирает детальную инфу об отеле из http://hotels.sletat.ru/?id=$hid
	 * http://hotels.sletat.ru/?id=391
	 * @param $hid
	 */
	public static function GetHotelInfo($hid) {
		$rurl = 'http://hotels.sletat.ru';
		$url = $rurl.'/?id='.$hid;
		$html = file_get_contents($url);
		if(!$html){
			return false;
		}
		$dom = new domDocument;
		$dom->loadHTML($html);
		$dom->preserveWhiteSpace = false;
		$name = $dom->getElementsByTagName('h2')->item(0)->nodeValue;
		$descr = $dom->getElementById('pDescription');
		$xpath = new DOMXPath($dom);
		$query = 'descendant::div[@class="DescriptionItems_cont"]/div/div';
		$entries = $xpath->query($query);
		$query2 = '//div[@class="rating"]/span[@class="s1"]';
		$rate = $xpath->query($query2);

		$ar = array(
			'NAME' => trim($name),
			'DESCRIPTION' => trim($descr->nodeValue),
			'RATE' => $rate->length
		);

		foreach($entries as $entry){
			$arP=array();
			$arP['VALUE']='';
			foreach($entry->childNodes as $cn){
				if(trim($cn->nodeValue)=='') continue;
				if($cn->nodeName == 'h4'){
					$arP['DESCRIPTION'] = $cn->nodeValue;
				} elseif($cn->nodeName == '#text'){
					$arP['VALUE']['TEXT'] .= $cn->nodeValue;
					$arP['VALUE']['TEXT'] .= '<br>';
				}
			}
			$ar['PROPERTIES'][] = $arP;
		}

		return $ar;
	}

	/**
	 * Метод возвращает список видов питания.
	 * @return
	 * MealCollection является коллекцией видов питания, каждый элемент Meal содержит поле Id (идентификатор вида питания) и Name (название вида питания).
	 */
	public static function GetMeals(){
		// cache month
		self::$method = 'GetMeals';
		self::$params = false;
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$LONG_CACHE, self::$method, self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}


	/**
	 * <br>
	 * Метод возвращает список доступных туроператоров. Список доступных туроператоров определяется лицензией,
	 * которая выдаётся на учётную запись SLETAT.RU, также любые туроператоры могут быть убраны вручную в личном
	 * кабинете SLETAT.RU.<br><br>
	 * Метод всегда возвращает полный список туроператоров, но отмечает тех, у которых есть туры из указанного
	 * города вылета в выбранную страну.
	 * @param array $params Параметры запроса:<br>
	 * townFromId – идентификатор города вылета;<br>
     * countryId – идентификатор страны;<br>
	 * @return
	 * TourOperatorCollection является коллекцией туроператоров, каждый элемент TourOperator содержит поле
	 * Id (идентификатор туроператора), Name (название туроператора), Enabled (наличие туров из указанного города вылета в выбранную страну).
	 */
	public static function GetTourOperators(){
		// cache month
		self::$method = 'GetTourOperators';
		self::$params = false;
		$obCache = new CPHPCache;
		//$obCache->CleanDir();
		if($obCache->StartDataCache(self::$LONG_CACHE, self::$method, self::$CACHE_DIR)){
			$get = self::getData();
			$obCache->EndDataCache(array("get" => $get)); // помним в кеш
		} else{
			$arVars = $obCache->GetVars(); // берем кеш
			$get = $arVars["get"]; // в удобную переменную
		}
		return $get;
	}

	/**
	 * Метод для создания поискового запроса, использует асинхронную модель для работы. Метод возвращает
	 * единственное поле – идентификатор созданного поискового запроса. Так как разные туроператоры возвращают
	 * результаты запроса в разные интервалы времени (до 90 секунд), то для отслеживания состоян ия поискового
	 * запроса используется метод GetRequestState.<br><br>
	 * <b>Важно!</b> Логика работы с сервисом для поиска цен описана в разделе «Логика работы с сервисом».
	 * @param array $params Параметры запроса:<br>
	 *  countryId – идентификатор страны;<br>
	 *  cityFromId – идентификатор города вылета;<br>
	 *  cities – опциональный параметр, определяет список курортов, для которых должен быть произведён
	 * поиск, передаются идентификаторы курортов;<br>
	 *  meals - опциональный параметр, определяет список видов питания, для которых должен быть
	 * произведён поиск, передаются идентификаторы видов питания;<br>
	 *  stars - опциональный параметр, определяет список категорий отелей, для которых должен быть
	 * произведён поиск, передаются идентификаторы категорий отелей;<br>
	 *  hotels - опциональный параметр, определяет список отелей, среди которых должен быть произведён
	 * поиск, передаются идентификаторы отелей;<br>
	 *  adults – количество взрослых, опциональный параметр, значение по умолчанию 2;<br>
	 *  kids – количество детей, опциональный параметр, значение по умолчанию 0;<br>
	 *  kidsAges – опциональный параметр для передачи возраста для каждого ребёнка, если данный параметр
	 * используется, то количество элементов в массиве должно быть равным количеству детей в параметре
	 * kids;<br>
	 *  nightsMin – минимальное количество ночей в туре, опциональный параметр, значение по умолчанию 7;<br>
	 *  nightsMax – максимальное количество ночей в туре, опциональный параметр, значение по умолчанию 7;<br>
	 *  priceMin – опциональный параметр для указания минимальной цены тура;<br>
	 *  priceMax – опциональный параметр для указания максимальной цены тура;<br>
	 *  currencyAlias – валюта, в которой будут выданы цены на туры, а также валюта для параметров priceMin и
	 * priceMax, поддерживаются значения USD, EUR и RUB;<br>
	 *  departFrom и departTo определяют диапазон дат, в котором туры должны начинаться, значения по
	 * умолчанию для первой даты – текущая дата +1 день, для второй даты - +7 дней от первой даты, даты
	 * передаются в формате dd.MM.yyyy;<br>
	 *  hotelIsNotInStop – опциональный параметр, при значении true в результаты поиска попадут отели только
	 * со статусом «под запрос» и «есть места», при значении false (по умолчанию) в выдачу попадают также
	 * отели со статусом «нет мест»;<br>
	 *  hasTickets – опциональный параметр, при значении true, в результаты поиска попадут туры, в котором
	 * есть билет «туда» и билет «обратно» в наличии, класс билетов при этом не учитывается. При значении
	 * false (по умолчанию) параметр на результаты выдачи влиять не будет;<br>
	 *  ticketsIncluded – опциональный параметр, при значении true в результаты поиска попадут только туры с
	 * перелётами, при значении false (по умолчанию) в результатах допускаются туры «только отель» ;<br>
	 *  useFilter – опциональный параметр, при значении true указывает, что результаты выдачи должны быть
	 * отфильтрованы по списку туроператоров, предоставленному в параметре f_to_id, параметр используется
	 * для фильтрации только после создания поискового запроса, значение по умолчанию false;<br>
	 *  f_to_id – опциональный параметр, список идентификаторов туроператоров, туры которых должны быть
	 * выведены из результатов поиска (параметр используется только при useFilter = true);<br>
	 *  includeDescriptions – опциональный параметр, при значении true указывает, что в результаты выдачи
	 * записываются подробные описания для отеля, размещения, вида питания;<br>
	 *  cacheMode – указание на поиск в кеше поисковой системы (0 – не использовать кеш; 1 – использовать
	 * кеш при ошибках поиска у туроператора (режим по умолчанию) ; 2 – режим SmartCache, на основе
	 * статистики поисковых запросов и наполнения кеша будет предпринята попытка разрешения запроса с
	 * использованием кеша, если последний не может дать достоверный результат, запрос уйдет в поиск к
	 * туроператору; 3 – запрос будет отправлен только в кеш, алгоритм SmartCache для подбора наиболее
	 * актуальных туров не будет использован; 4 – запрос будет отправлен только в кеш с использованием
	 * алгоритма SmartCache для поиска наиболее актуального набора туров.<br>
	 * @return
	 * Возвращается единственное значение – идентификатор созданного поискового запроса (Int32).<br>
	 * Элемент CreateRequestResult содержит идентификатор поиского запроса.
	 */
	public static function CreateRequest($params){
		self::$method = 'CreateRequest';
		self::$params = $params;
		return self::getData();
	}

	/**
	 * Метод возвращает статус загрузки туров для каждого туроператора в рамках указанного поискового запроса.<br>
	 * Метод принимает единственный параметр requestId, который выдаёт метод CreateRequest при создании
	 * поисковых запросов. С помощью данного метода можно отслеживать прогресс обработки поискового запроса.<br>
	 * <b>Важно!</b> Логика работы с сервисом для поиска цен описана в разделе «Логика работы с сервисом».
	 * @param array $requestId идентификатор поискового запроса, выдается методом CreateRequest при создании нового поискового запроса;
	 * @return
	 * OperatorLoadStateCollection является коллекцией состояний для каждого туроператора, каждый элемент
	 * OperatorLoadState содержит поле Id (идентификатор туроператора), Name (название туроператора), IsProcessed
	 * (обработан ли поисковый запрос к туроператору, всегда имеет значение true, если запрос был обработан,
	 * неважно, с ошибкой или без), IsCached (был ли ответ выдан из кеша), IsError (произошла ли ошибка при
	 * выполнении запроса), ErrorMessage (описание ошибки при IsError = true), IsTimeout (был ли запрос завершен по
	 * таймауту, IsError также проставляется true), ExecutionTimeMs (время в миллисекундах, которое было потрачено
	 * на выполнение поискового запроса), RowsCount (количество найденных туров).<br>
	 * <b>Важно!</b> Когда для каждого туроператора поле IsProcessed принимает значение true, это означает, что поисковый
	 * запрос был полностью обработан.
	 */
	public static function GetRequestState($requestId){
		self::$method = 'GetRequestState';
		self::$params = array('requestId'=>$requestId);
		return self::getData();
	}

	/**
	 * <br>
	 * Метод возвращает все туры найденные в рамках поискового запроса. Метод принимает единственный параметр
	 * requestId, который возвращается методом CreateRequest при создании новых запросов.<br><br>
	 * Важно! Если поисковый запрос не был обработан до конца (в результате метода GetRequestState не все
	 * туроператоры имеют флаг IsProcessed = true), то метод возвращает набор туров доступный на момент его вызова.
	 * Таким образом итоговый набор туров постоянно обновляется по мере обработки запроса каждым
	 * туроператором. Следовательно, <b>чтобы загрузить полный набор туров – ожидайте завершения поискового
	 * запроса используя метод GetRequestState.</b><br><br>
	 * <b>Важно!</b> Логика работы с сервисом для поиска цен описана в разделе «Логика работы с сервисом».
	 * @param array $requestId идентификатор поискового запроса, выдается методом CreateRequest при создании нового поискового запроса;
	 * @return
	 * Возвращается структура GetRequestResult, которая состоит из слеющих полей:<br>
	 *  LoadState – описывает статус загрузки туров по каждому туроператору, структура описана в методе
	 * GetLoadSate;<br>
	 *  Rows – состоит из структур XmlTourRecord, которые описывают найденные туры;<br>
	 *  RowsCount – количество туров, которые найдены в рамках поискового запроса на данный момент;<br>
	 *  OilTaxes – информация о топливных сборах к турам в результате поиска;<br>
	 *  Visa – информация о стоимости визы;<br><br>
	 * Структура <b>XmlTourRecord</b> состоит из следующих полей:<br>
	 * Adults Int32 Количество взврослых в номере<br>
	 * BuninessTicketsDpt Enum Наличие билетов бизнес-класса туда, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * BuninessTicketsRtn Enum Наличие билетов бизнес-класса обратно, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * CheckInDate String Дата начала тура в формате dd.MM.yyyy.<br>
	 * CityFromId Int32 Идентификатор города вылета.<br>
	 * CityFromName String Название города вылета.<br>
	 * CountryId Int32 Идентификатор страны.<br>
	 * CountryName String Название страны.<br>
	 * Currency String Валюта, в которой отображены цены, возможные значения: RUB, USD и EUR.<br>
	 * EconomTicketsDpt Enum Наличие билетов эконом-класса туда, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * EconomTicketsRtn Enum Наличие билетов эконом-класса обратно, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * HotelDescription String Краткое описание отеля, выдаётся только с параметром includeDescriptions =
	 * true. Может быть пустым, если отель не слинкован или не имеет описания.<br>
	 * HotelDescriptionUrl String Ссылка на описание отеля.<br>
	 * HotelId Int32 Идентификатор отеля, может быть равен 0, если отель не слинкован.<br>
	 * HotelIsInStop Enum Наличие мест в отеле, возможные значения: Stop (нет билетов), Available (есть
	 * билеты), Request (под запрос) и Unknown (нет данных).<br>
	 * HotelName String Название отеля.<br>
	 * HotelRating Single Рейтинг отеля по десятибальной шкале, если рейтинг отсутствует, в поле
	 * будет значение 0.<br>
	 * HotelTitleImageUrl String Ссылка на титульное изображение отеля в уменьшенном виде (115x80).<br>
	 * Размеры изображения могут быть уканы самостоятельно, используется
	 * следующий шаблон ссылки на изображение:<br>
	 * http://hotelcard.dyndns.org/i/p/{hotel_id}_{image_index}_{h}_{w}.jpg
	 * где:<br>
	 *  {hotel_id} – идентификатор отеля;<br>
	 *  {image_index} – индекс изображения отеля, начинается с 0;<br>
	 *  {h} – требуемая высота изображения;<br>
	 *  {w} – требуемая ширина изображения;<br>
	 * Изображения не предоставляются для неслинкованных отелей, а также для
	 * отелей с отсутствующим описанием.<br>
	 * HtPlaceDescription String Описание размещения, выдаётся только с параметром includeDescriptions =
	 * true. Может быть пустым, если размещение не слинковано или не имеет
	 * описания.<br>
	 * HotelPhotosCount Int32 Количество фотографий к отелю.<br>
	 * HtPlaceId Int32 Идентификатор размещения или 0, если оно не слинковано.<br>
	 * HtPlaceName String Название размещения в номере отеля.<br>
	 * IsDemoMode Boolean Указывает на то, что выдача производится в демо-режимер (значение true). В
	 * демо режиме не отображаются цены, а также все результаты поиска
	 * заполнены демонстрационными данными.<br>
	 * Kids Int32 Количество детей в номере.<br>
	 * MealId Int32 Идентификатор вида питания, может быть равен 0, если вид питания не
	 * слинкован.<br>
	 * MealDescription String Описание вида питания, выдаётся только с параметром includeDescriptions =
	 * true. Может быть пустым, если вид питания не слинкован или не имеет
	 * описания.<br>
	 * MealName String Название вида питания.<br>
	 * Nights Int32 Количество ночей в туре.<br>
	 * OfferId Int64 Идентификатор ценового предложения. Используется в месте с SourceId для
	 * актуализации тура и оформлении заказа.<br>
	 * Price Int32 Цена тура в запрошенной валюте.<br>
	 * ResortDescriptionUrl String Ссылка на описание курорта, строка может быть пустой, если курорт не
	 * слинкован или не имеет ссылки на описание.<br>
	 * ResortId Int32 Идентификатор курорта, может быть равным 0, если курорт не слинкован.<br>
	 * ResortName String Название курорта.<br>
	 * RoomId Int32 Идентификатор типа номера, может быть равным 0, если тип номера не
	 * слинкован.<br>
	 * RoomName String Тип номера.<br>
	 * SourceId Int32 Зашифрованный идентификатор туроператора, значение используется вместе
	 * с OfferId при актуализации и заказе туров. В расширенной версии сервиса
	 * предоставляется оригинальный идентификатор туроператора (по всем
	 * вопросам обращайтесь в службу поддержки info@sletat.ru).<br>
	 * SourceImageUrl String Ссылка на логотип туроператора, поле заполняется только при покупке
	 * расширенной версии сервиса (по всем вопросам обращайтесь в службу
	 * поддержки info@sletat.ru).<br>
	 * SourceName String Название туроператора, поле заполняется только при покупке расширенной
	 * версии сервиса (по всем вопросам обращайтесь в службу поддержки
	 * info@sletat.ru).<br>
	 * SourceSearchFormUrl String Ссылка на форму поиска туроператора, поле заполняется только при покупке
	 * расширенной версии сервиса (по всем вопросам обращайтесь в службу
	 * поддержки info@sletat.ru).<br>
	 * StarId Int32 Идентификатор категории отеля, может быть равным 0, если категория отеля
	 * не слинкована.<br>
	 * StarName String Категория отеля.<br>
	 * TicketsIncluded Enum Включены ли билеты в стоимость тура, возможные значения: NotIncluded (не
	 * включены), Included (включены) и Unknown (нет данных).<br>
	 * TourName String Название тура, может быть пустым, если туроператор не предоставляет таких
	 * данных.<br>
	 * TourUrl String Ссылка на описание / бронирование тура на сайте туроператора, поле
	 * заполняется только при покупке расширенной версии сервиса (по всем
	 * вопросам обращайтесь в службу поддержки info@sletat.ru).<br>
	 * В настоящий момент некоторые туроператоры не имеют ссылок в сервисе
	 * Sletat.Ru.<br>
	 * OriginalHotelName String Оригинальное название отеля (данные туроператора).<br>
	 * OriginalStarName String Оригинальное название категории отеля (данные туроператора).<br>
	 * OriginalTownName String Оригинальное название курорта (данные туроператора).<br>
	 * OriginalMealName String Оригинальное название вида питания (данные туроператора).<br>
	 * OriginalHtPlaceName String Оригинальное название размещения (данные туроператора).<br>
	 * OriginalRoomName String Оригинальное название типа номера (данные туроператора).<br>
	 * FewPlacesInHotel Int32 Если есть места в отеле (HotelIsInStop = Available) и данное значение отлично
	 * от нуля, то мест в отеле МАЛО.<br>
	 * Значение -1 передаётся в случае, если туроператор сообщает о том, что мест
	 * МАЛО, но не информирует о точном количестве в остатке.<br>
	 * Если передано любое иное число отличное от нуля, то это точное количество
	 * оставшихся мест.<br>
	 * FewEconomTicketsDpt Int32 Если есть места на перелёт эконом классом в место отдыха (EconomTicketsDpt
	 * = Available) и данное значение отлично от нуля, то билетов МАЛО.<br>
	 * Значение -1 передаётся в случае, если туроператор сообщает о том, что
	 * билетов МАЛО, но не информирует о точном количестве в остатке.<br>
	 * Если передано любое иное число отличное от нуля, то это точное количество
	 * оставшихся билетов.<br>
	 * FewEconomTicketsRtn Int32 Если есть места на перелёт эконом классом обратно (EconomTicketsRtn =
	 * Available) и данное значение отлично от нуля, то билетов МАЛО.<br>
	 * Значение -1 передаётся в случае, если туроператор сообщает о том, что
	 * билетов МАЛО, но не информирует о точном количестве в остатке.<br>
	 * Если передано любое иное число отличное от нуля, то это точное количество
	 * оставшихся билетов.<br>
	 * FewBusinessTicketsDpt Int32 Если есть места на перелёт бизнес классом в место отдыха (BusinessTicketsDpt
	 * = Available) и данное значение отлично от нуля, то билетов МАЛО.<br>
	 * Значение -1 передаётся в случае, если туроператор сообщает о том, что
	 * билетов МАЛО, но не информирует о точном количестве в остатке.<br>
	 * Если передано любое иное число отличное от нуля, то это точное количество
	 * оставшихся билетов.<br>
	 * FewBusinessTicketsRtn Int32 Если есть места на перелёт бизнес классом обратно (BusinessTicketsRtn =
	 * Available) и данное значение отлично от нуля, то билетов МАЛО.<br>
	 * Значение -1 передаётся в случае, если туроператор сообщает о том, что
	 * билетов МАЛО, но не информирует о точном количестве в остатке.<br>
	 * Если передано любое иное число отличное от нуля, то это точное количество
	 * оставшихся билетов.<br>
	 */
	public static function GetRequestResult($requestId){
		self::$method = 'GetRequestResult';
		self::$params = array('requestId'=>$requestId);
		return self::getData();
	}

	/**
	 * Данный метод необходим для актуализации предложения от туроператора.
	 * @param array $params Параметры запроса:<br>
	 *  requestId – идентификатор поискового запроса, выдается методом GetTours при создании нового
	 * поискового запроса;<br>
	 *  offerId – идентификатор тура, выдаётся в методе GetTours для каждого тура;<br>
	 *  sourceId – идентификатор туроператора, выдаётся в методе GetTours для каждого тура;<br>
	 * @return
	 * Возвращается структура ActualizePriceResult, которая состоит из слеющих полей:<br>
	 *  TourInfo – структура описывает основную информацию о туре, формат описан ниже;<br>
	 *  RandomNumber – случайное трёхзначное число, по которому можно просмотреть информацию о туре в
	 * личном кабинете SLETAT.RU или в SletatRu Agent, используется для того, чтобы клиент мог точно сообщить
	 * менеджеру вашей компании о туре, который он нашёл;<br>
	 *  IsFound – поле принимает значение false, если тур не был найден в базе туроператора;<br>
	 *  IsError – принимает значение true, если при актуализации тура возникла ошибка;<br><br>
	 * Описание структуры <b>TourInfo</b>:<br>
	 * CountryName String Название страны (данные от туроператора).<br>
	 * CityFromName String Название города вылета (данные от туроператора).<br>
	 * ResortName String Название курорта (данные от туроператора).<br>
	 * TourName String Название тура (данные от туроператора).<br>
	 * TourDate String Дата начала тура в формате dd.MM.yyyy.<br>
	 * Nights Int32 Количество ночей в туре.<br>
	 * HotelName String Название отеля (данные от туроператора).<br>
	 * StarName String Категория отеля (данные от туроператора).<br>
	 * RoomName String Тип номера (данные от туроператора).<br>
	 * MealName String Вид питания (данные от туроператора).<br>
	 * TicketsIncluded Enum Включены ли билеты в стоимость тура, возможные значения: NotIncluded
	 * (не включены), Included (включены) и Unknown (нет данных).<br>
	 * HotelIsInStop Enum Наличие мест в отеле, возможные значения: Stop (нет билетов), Available
	 * (есть билеты), Request (под запрос) и Unknown (нет данных).<br>
	 * EconomTicketsDpt Enum Наличие билетов эконом-класса туда, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * EconomTicketsRtn Enum Наличие билетов эконом-класса обратно, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * BusinessTicketsDpt Enum Наличие билетов бизнес-класса туда, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * BusinessTicketsRtn Enum Наличие билетов бизнес-класса обратно, возможные значения: Stop (нет
	 * билетов), Available (есть билеты), Request (под запрос) и Unknown (нет
	 * данных).<br>
	 * HtPlaceName String Название размещения (данные от туроператора).<br>
	 * Price Int32 Цена тура в запрошенной валюте.<br>
	 * PriceCurrency String Обозначение валюты (RUB, EUR или USD).<br>
	 * OriginalPrice Int32 Оригинальная цена тура в исходной валюте (данный параметр доступен не
	 * всегда, поэтому в это значение может дублироваться цена Price).<br>
	 * OriginalPriceCurrency String Обозначение валюты (данные от туроператора) для цены OriginalPrice.<br>
	 * SourceId Int32 Идентификатор туроператора, поле заполняется только при покупке
	 * расширенной версии сервиса (по всем вопросам обращайтесь в службу
	 * поддержки info@sletat.ru).<br>
	 * SourceName String Название туроператора, поле заполняется только при покупке расширенной
	 * версии сервиса (по всем вопросам обращайтесь в службу поддержки
	 * info@sletat.ru).<br>
	 * SourceSearchFormUrl String Ссылка на форму поиска туроператора, поле заполняется только при
	 * покупке расширенной версии сервиса (по всем вопросам обращайтесь в
	 * службу поддержки info@sletat.ru).<br>
	 * SysCountryId Int32 Идентификатор страны из справочника стран.<br>
	 * SysCountryName String Название страны из справочника стран.<br>
	 * SysCityFromId Int32 Идентификатор города вылета из справочника городов вылета.<br>
	 * SysCityFromName String Название города вылета из справочника городов вылета.<br>
	 * SysResortId Int32 Идентификатор курорта из справочника курортов, параметр может быть
	 * равен 0, если курорт туроператора не слинкован.<br>
	 * SysResortName String Название курорта из справочника курортов, параметр может иметь пустое
	 * значение, если курорт туроператора не слинкован.<br>
	 * SysHotelId Int32 Идентификатор отеля из справочника отелей, параметр может быть равен 0,
	 * если отель туроператора не слинкован.<br>
	 * SysHotelName String Название отеля из справочника отелей, параметр может иметь пустое
	 * значение, если отель туроператора не слинкован.<br>
	 * SysStarId Int32 Идентификатор категории отеля из справочника, параметр может быть
	 * равен 0, если категория отеля туроператора не слинкована.<br>
	 * SysStarName String Название категории отеля из справочника, параметр может иметь пустое
	 * значение, если категория отеля туроператора не слинкована.<br>
	 * SysRoomId Int32 Идентификатор типа номера, параметр может быть равен 0, если тип
	 * номера туроператора не слинкован.<br>
	 * SysRoomName String Название типа номера, параметр может иметь пустое значение, если тип
	 * номера туроператора не слинкован.<br>
	 * SysMealId Int32 Идентификатор вида питания из справочника, параметр может быть равен 0,
	 * если вид питания туроператора не слинкован.<br>
	 * SysMealName String Название вида питания из справочника, параметр может иметь пустое
	 * значение, если вид питания туроператора не слинкован.<br>
	 * SysHtPlaceId Int32 Идентификатор размещения, параметр может быть равен 0, если
	 * размещение туроператора не слинковано.<br>
	 * SysHtPlaceName String Название размещение, параметр может иметь пустое значение, если
	 * размещение туроператора не слинковано.<br>
	 * HotelDescriptionUrl String Ссылка на описание отеля.<br>
	 * HotelTitleImageUrl String Ссылка на титульное изображение отеля в уменьшенном виде (115x80).<br>
	 * Размеры изображения могут быть уканы самостоятельно, используется
	 * следующий шаблон ссылки на изображение:<br>
	 * http://hotelcard.dyndns.org/i/p/{hotel_id}_{image_index}_{h}_{w}.jpg
	 * где:<br>
	 *  hotel_id – идентификатор отеля;<br>
	 *  image_index – индекс изображения отеля, начинается с 0;<br>
	 *  h – требуемая высота изображения;<br>
	 *  w – требуемая ширина изображения;<br>
	 * Изображения не предоставляются для неслинкованных отелей, а также для
	 * отелей с отсутствующим описанием.<br>
	 * HotelPhotosCount Int32 Количество фотографий к отелю.<br>
	 * TourUrl String Ссылка на описание / бронирование тура на сайте туроператора, поле
	 * заполняется только при покупке расширенной версии сервиса (по всем
	 * вопросам обращайтесь в службу поддержки info@sletat.ru).<br>
	 * В настоящий момент некоторые туроператоры не имеют ссылок в сервисе
	 * Sletat.Ru.<br>
	 * OriginalCurrencyId Int32 Идентификатор оригинальной валюты туры (2 – USD, 3 – EUR, 5 – RUR).<br><br>
	 * <em>В таблице к некоторым полям добавлен комментарий «(данные от туроператора)». Комментарий означает, что
	 * данные строки взяты напрямую из данных туроператора, а не названия из справочников SLETAT.RU.</em>
	 */
	public static function ActualizePrice($params){
		self::$method = 'ActualizePrice';
		self::$params = $params;
		return self::getData();
	}

	/**
	 * Данный метод позволяет получать информацию о туре по четырёхзначному коду тура с сайта Sletat.Ru или по
	 * трёхзначному коду, полученному с помощью расширенного сервиса поиска XML/JSON в методе актуализации.
	 * Четырёхзначные коды отображаются на сайте Sletat.Ru в поиске, или в разделах «Горящие туры» и «Раннее
	 * бронирование». Выдача метода идентична методу ActualizePrice и ниже не описывается.
	 * @param array $code четырёхзначный код тура с сайта Sletat.Ru (целое число 1000-9999) или трёхзначный код (целое число 100-999);
	 * @return
	 * Полностью <b>аналогичен</b> выдаче в методе <b>ActualizePrice</b>.
	 */
	public static function ActualizePriceByCode($code){
		self::$method = 'ActualizePriceByCode';
		self::$params = array('code'=>$code);
		return self::getData();
	}


	/**
	 * Метод <b>добавляет заказ тура</b> в систему SLETAT.RU. В личном кабинете есть возможность <b>настройки уведомлений с
	 * помощью электронной почты и SMS</b> менеджеров вашей компании. Также доступно приложение <b>SletatRu Agent
	 * для Windows</b>, которое отслеживает появление новых заказах и информирует об этом пользователя.
	 * @param array $params Параметры запроса:<br>
	 *  requestId – идентификатор поискового запроса, выдается методом GetTours при создании нового
	 * поискового запроса;<br>
	 *  offerId – идентификатор тура, выдаётся в методе GetTours для каждого тура;<br>
	 *  sourceId – идентификатор туроператора, выдаётся в методе GetTours для каждого тура;<br>
	 *  user – имя клиента, который делает заказ;<br>
	 *  email – адрес электронной почты клиента, который делает заказ;<br>
	 *  phone – телефон клиента, который делает заказ;<br>
	 *  info – опциональный параметр, любая дополнительная информация от клиента;<br>
	 * @return
	 * Нет данных.
	 */
	public static function SaveTourOrder($params){
		self::$method = 'SaveTourOrder';
		self::$params = $params;
		return self::getData();
	}

	/**
	 * Получает URL изображения с номером $n, высотой $h и шириной $w(если false - вычисляется автоматически)
	 * @static
	 * @param $url адрес
	 * @param int $n номер картинки
	 * @param int $h высота
	 * @param bool $w ширина
	 * @return string
	 * URL картинки
	 */
	public static function getImg($url='', $n=0, $w=false, $h=false){
		if(is_int($url)){
			$url = "http://hotels.sletat.ru/i/p/{$url}_0.jpg";
		}
		/*if($h==false){
			$h = 80;
		}*/
		if(!$h || $h<=0){
			$h = floor($w * 0.6956521739130435); // 80 / 115 = 0.6956521739130435
		}
		$url = preg_replace('#^([\S]+/)([\d]+)_[\d]{1,3}(.[a-z]{2,3})$#', '$1$2_'.$n.'_'.$h.'_'.$w.'$3', $url);
		if($url && trim($url)!=''){
			$fgc = file_get_contents($url, NULL, NULL, 150, 250);
		}
		if($fgc && strpos( htmlspecialchars($fgc), 'ошибка')===false){
			return "$url";
		} else{
			return false;
		}
	}

	/**
	 * Создает (с помощью md5) Id отеля, если его нет
	 * @param &$h Объект отеля
	 */
	public static function prepareHotelId(&$h){
		if((int)$h->HotelId > 0) return;
		$h->HotelId = md5($h->HotelName.$h->ResortName.$h->CountryName);
	}

	/**
	 * Возвращает полное название типа питания
	 * @param $n Код типа питания
	 * @return mixed
	 */
	public static function MealByCode($n){
		return self::$MEALS[$n];
	}

	/**
	 * Подготавливает параметры для поиска
	 * @param $ar Массив параметров для поиска из гета или поста
	 * @return array Сформированный массив параметров для поиска
	 */
	public static function prePrms($ar=false){
		if(!$ar){
			$ar = self::$params;
		}
//		echo '<pre>'; print_r($ar); echo '</pre>';
		foreach($ar as $k => $v){
			if(strpos($k,'[')!==false){
				$k = preg_replace('#^[\S]+\[([\S]+)\]?$#', '$1', $k, 1);
			}
			if(is_array($v)){
				foreach($v as $k2=>$v2){
					if(trim($v2)=='' || !$v2){
						unset($v[$k2]);
					}
				}
				if(empty($v)){
					unset($ar[$k]);
				}
			}
			$params[ $k ] = $v;
		}
		if(!$params['departTo']){
			$art=explode('.',$params['departFrom']);
			$params['departTo'] = date('d.m.Y', mktime(0,0,0,(int)$art[1],(int)$art[0],(int)$art[2]) + 3600 * 24 * 14);
		}
		if(!$params['currencyAlias']){
			$params['currencyAlias'] = 'RUR';
		}
		// echo '<pre>'; print_r($params); echo '</pre>'; 
		return $params;
	}

	/**
	 * Основной метод получающий данные от сервиса
	 * @static
	 * @return bool Возвращает преобразованный json-объект
	 */
	private static function getData(){
		self::$params = self::prePrms();
		self::$LAST_ERROR = false;
		if(class_exists('Cconsole') && self::$DEBUG){
			$dbg = true;
			Cconsole::info('['.self::$method.']_request_prms: ', self::$params);
		}

		if(!self::$SOAP){
			if($dbg) Cconsole::time('connect_to_SLETAT.RU');

			self::$SOAP = new SoapClient('http://module.sletat.ru/XmlGate.svc?wsdl');
			$header = new SoapHeader("urn:SletatRu:DataTypes:AuthData:v1", "AuthInfo", array("Login"=>self::$LOGIN, 'Password'=>self::$PASSWORD));
			self::$SOAP->__setSoapHeaders($header);

			if($dbg) Cconsole::timeEnd('connect_to_SLETAT.RU');
		}

		if(self::$params){
//			echo '<pre>'; print_r(self::$params); echo '</pre>';
			self::$response = self::$SOAP->{self::$method}(self::$params);
		} else{
			self::$response = self::$SOAP->{self::$method}();
		}

		if($dbg) Cconsole::info('['.self::$method.']_response: ', self::$response);

		return self::$response;
	}

	/**
	 * Синхронизирует местоположения-секции (страны, города) в инфоблоке $iblock, секции $section
	 * @param unknown_type $iblock ID инфоблока
	 * @param unknown_type $section ID секции, если не указана - в корень
	 */
	public static function syncPlaces($iblock, $section=false){
//		CModule::IncludeModule('iblock');
//
//		/*$rs = CIBlockSection::GetList(array('SORT'=>'ASC'),array('IBLOCK_ID'=>1,'>=TIMESTAMP_X'=>'31.08.2012 00:00:00'));
//		while($ar = $rs->Fetch()){
//			if($ar['CODE'] == 'sletat-ru') continue;
//			$el = new CIBlockSection();
//			$el->Delete($ar['ID']);
//		}
//		echo "<pre>удалено "; print_r($rs->SelectedRowsCount()); echo " записей</pre>";*/
//
//		$rsCo = self::GetCountries();
//		$ci_add=0;
//		$cicnt=0;
//		$co_add=0;
//		$cocnt = sizeof($rsCo->GetCountriesResult->Country);
//		foreach($rsCo->GetCountriesResult->Country as $co){
//			$co->Code = rus2translit($co->Name);
//			// пишем в секцию
//			$sub_section=false;
//			$coel = new CIBlockSection();
//			$karf=array(
//				'IBLOCK_ID' => $iblock,
//				'IBLOCK_SECTION_ID' => $section,
//				'NAME' => $co->Name,
//				'CODE' => $co->Code,
//				'XML_ID' => $co->Id,
//				'UF_IS' => 3,
//			);
//
//			if($sub_section = $coel->Add($karf, false,false)){
//				$co_add++;
//				$rsCi = self::GetCities($co->Id);
//				$cicnt+=sizeof($rsCi->GetCitiesResult->City);
//				foreach($rsCi->GetCitiesResult->City as $ci){
//					$ci->Code = rus2translit($ci->Name);
//					$ciel = new CIBlockSection();
//					$arf=array(
//						'IBLOCK_ID' => $iblock,
//						'IBLOCK_SECTION_ID' => $sub_section,
//						'NAME' => $ci->Name,
//						'CODE' => $ci->Code,
//						'XML_ID' => $ci->Id,
//						'UF_IS' => 4,
//					);
//					$ss = $ciel->Add($arf,false,false);
//					if($ss){
//						$ci_add++;
//					} else{
//						echo 'Ошибка добавления города: '.$ciel->LAST_ERROR;print_r('<br>');
//					}
//				}
//			} else{
//				echo 'Ошибка добавления страны: '.$coel->LAST_ERROR;print_r('<br>');
//			}
//		}
//		 echo "<pre>стран найдено "; print_r($cocnt); echo "</pre>";
//		 echo "<pre>городов найдено "; print_r($cicnt); echo "</pre>";
//		 echo "<pre>стран добавлено "; print_r($co_add); echo "</pre>";
//		 echo "<pre>городов добавлено "; print_r($ci_add); echo "</pre>";
	}
}
?>
